package org.cflpath.main;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.cflpath.cfl.CFLGraph;
import org.cflpath.cfl.CFLGraph.GraphElement;
import org.cflpath.cfl.CFLGraph.Path;
import org.cflpath.cfl.FlowsToGraph;
import org.cflpath.utility.Utility.MultivalueMap;

public class Main {
	
	public static FlowsToGraph getInput(BufferedReader input) throws IOException {
		// graph
		FlowsToGraph graph = new FlowsToGraph();
		
		// stub method arguments
		// <String,Vertex>
		MultivalueMap<String,String> methodArgs = new MultivalueMap<String,String>();
		Map<String,String> methodRet = new HashMap<String,String>();
		
		String line;
		while((line = input.readLine()) != null) {
			String[] tokens = line.split(" ");
			if(tokens.length == 3) {
				String source = tokens[0];
				String sink = tokens[1];
	
				Integer label = null;
				if(tokens[2].startsWith("new")) {
					label = graph.getNew();
				} else if(tokens[2].startsWith("load_")) {
					String field = tokens[2].substring(5);
					graph.addField(field);
					label = graph.getLoad(field);
				} else if(tokens[2].startsWith("store_")) {
					String reference = tokens[2].substring(6);
					graph.addField(reference);
					label = graph.getStore(reference);
				} else if(tokens[2].startsWith("assign")) {
					label = graph.getAssign();
				} else if(tokens[2].startsWith("stubarg")) {
					//graph.addMethod(tokens[1]);
					methodArgs.add(tokens[1], tokens[0]);
					label = null;
				} else if(tokens[2].startsWith("stubret")) {
					methodRet.put(tokens[1], tokens[0]);
					label = null;
				}
				if(label != null) {
					graph.addEdge(source, sink, label);
				}
			}
		}
		for(String methodName : methodArgs.keySet()) {
			graph.addStubMethod(methodArgs.get(methodName), methodRet.get(methodName), methodName);
		}
		
		// CFL REACHABILITY
		//System.out.println(graph.getFlowsToCFL());
		/*
		PrintWriter pw = new PrintWriter(new File("output.txt"));
		graph.addProductions(graph.getFlowsToCFL());
		for(Edge edge : graph.getEdges()) {
			if(edge.getElement().equals(new Variable("flowsTo"))) {
				pw.println(edge.toString());
			}
		}
		pw.close();
		*/
		//System.out.println(graph);
		//System.out.println(graph.getFlowsToCFL());
		return graph;
	}
	
	public static CFLGraph getSimpleCFLGraph() {
		// graph
		FlowsToGraph graph = new FlowsToGraph();
		
		// references
		graph.addField("f");
		
		// terminals
		int assign = graph.getAssign();
		int new_terminal = graph.getNew();
		int store_f = graph.getStore("f");
		int load_f = graph.getLoad("f");
		
		// vertices
		String v = new Vertex("v");
		String w = new Vertex("w");
		String x = new Vertex("x");
		String y = new Vertex("y");
		String z = new Vertex("z");
		
		Vertex o1 = new Vertex("o1");
		Vertex o2 = new Vertex("o2");
		
		// edges
		graph.addEdge(o1, x, new_terminal);
		graph.addEdge(o2, z, new_terminal);
		graph.addEdge(z, y, store_f);
		graph.addEdge(x, y, assign);
		graph.addEdge(x, w, assign);
		graph.addEdge(w, v, load_f);
		
		// flows to cfl
		//System.out.println(graph.getFlowsToCFL());
		
		// return graph cfl
		return graph;
	}
	
	public static void main(String[] args) {
		/*
		FlowsToContextGraph contextGraph = new FlowsToContextGraph();
		contextGraph.addMethod("foo");
		NormalCFL cfl = contextGraph.getContextCFL();
		System.out.println(cfl.getCFL());
		*/
		long time = System.currentTimeMillis();
		try {
			FlowsToGraph cflGraph = getInput(new BufferedReader(new FileReader("test.txt")));
			//FlowsToGraph cflGraph = getInput(new BufferedReader(new FileReader("cfl.reps")));
			//CFL graphCfl = getSimpleCFLGraph();
			//System.out.println(graphCfl);
			
			//System.out.println("Number of productions: " + cflGraph.getFlowsToCfl().getNumProductions());
			//System.out.println("Number of vertices: " + cflGraph.size());
			Map<GraphElement,Path> shortestPaths = cflGraph.getShortestPaths();
			for(Map.Entry<GraphElement,Path> entry : shortestPaths.entrySet()) {
				if(entry.getKey().getElement().getName().equals("flowsTo")) {
					System.out.println(entry.getKey() + ", weight: " + entry.getValue().getWeight());
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		System.out.println("time: " + (System.currentTimeMillis() - time));
	}
}
