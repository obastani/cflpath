package org.cflgraph.cfl;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.cflgraph.cfl.Element.Terminal;
import org.cflgraph.cfl.Element.Variable;
import org.cflgraph.cfl.Production.EmptyProduction;
import org.cflgraph.cfl.Production.PairProduction;
import org.cflgraph.cfl.Production.SingleProduction;
import org.cflpath.utility.Utility.MultivalueMap;

public class NormalCFL {
	private Set<Terminal> terminals = new HashSet<Terminal>();
	
	private MultivalueMap<Element,SingleProduction> singleProductionsByInput = new MultivalueMap<Element,SingleProduction>();
	private MultivalueMap<Element,PairProduction> pairProductionsByFirstInput = new MultivalueMap<Element,PairProduction>();
	private MultivalueMap<Element,PairProduction> pairProductionsBySecondInput = new MultivalueMap<Element,PairProduction>();
	
	public void add(SingleProduction singleProduction) {
		this.singleProductionsByInput.add(singleProduction.getInput(), singleProduction);
		if(singleProduction.getInput().isTerminal()) {
			this.terminals.add((Terminal)singleProduction.getInput());
		}
	}
	
	public Set<SingleProduction> getSingleProductionsByInput(Element input) {
		return this.singleProductionsByInput.get(input);
	}
	
	public void add(PairProduction pairProduction) {
		this.pairProductionsByFirstInput.add(pairProduction.getFirstInput(), pairProduction);
		this.pairProductionsBySecondInput.add(pairProduction.getSecondInput(), pairProduction);
		if(pairProduction.getFirstInput().isTerminal()) {
			this.terminals.add((Terminal)pairProduction.getFirstInput());
		}
		if(pairProduction.getSecondInput().isTerminal()) {
			this.terminals.add((Terminal)pairProduction.getSecondInput());
		}
	}
	
	public Set<PairProduction> getPairProductions() {
		return this.pairProductions;
	}
	
	public List<PairProduction> getPairProductionsByFirstInput(Element input) {
		return this.pairProductionsByFirstInput.get(input);
	}
	
	public List<PairProduction> getPairProductionsBySecondInput(Element input) {
		return this.pairProductionsBySecondInput.get(input);
	}
	
	// return a list of binary productions equivalent to the given production
	// assume the production isn't empty!
	public void add(Production production) {
		switch(production.getInputs().size()) {
		case 0:
			this.add(new EmptyProduction(production.getTarget()));
			break;
	    case 1:
	    	this.add(new SingleProduction(production.getTarget(), production.getInputs().get(0)));
	    	break;
	    case 2:
	    	this.add(new PairProduction(production.getTarget(), production.getInputs().get(0), production.getInputs().get(1)));
	    	break;
	    default:
	      	Element firstInput = production.getInputs().get(0);
	     	Element secondInput = production.getInputs().get(1);
	
	     	//String targetString = production.getTarget() + "->" + firstInput.getName() + "^" + secondInput.getName();
	     	String targetString = firstInput.getName() + "^" + secondInput.getName();
	     	Variable target = new Variable(targetString);
	     	this.add(new PairProduction(target, firstInput, secondInput));
	
	     	for(int i=2; i<production.getInputs().size()-1; i++) {
	     		firstInput = target;
	     		secondInput = production.getInputs().get(i);
	     		targetString += "^" + secondInput.getName();
	     		target = new Variable(targetString);
	     		this.add(new PairProduction(target, firstInput, secondInput));
	     	}
	
	     	firstInput = target;
	     	secondInput = production.getInputs().get(production.getInputs().size()-1);
	     	target = production.getTarget();
	     	this.add(new PairProduction(target, firstInput, secondInput));
	     	break;
		}
	}
	
	@Override
	public String toString() {
		StringBuilder result = new StringBuilder();
		for(Production production : this.singleProductions) {
			result.append(production.toString()+"\n");
		}
		for(Production production : this.pairProductions) {
			result.append(production.toString()+"\n");
		}
		return result.toString();
	}
}
