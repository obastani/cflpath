package org.cflpath.utility;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Utility {
	public static class Pair<X,Y> {
		private X x;
		private Y y;
		
		public Pair(X x, Y y) {
			this.x = x;
			this.y = y;
		}
		
		public X getX() {
			return this.x;
		}
		
		public Y getY() {
			return this.y;
		}
		
		@Override
		public int hashCode() {
			return this.x.hashCode() + this.y.hashCode();
		}
		
		@Override
		public boolean equals(Object object) {
			if(this == object) {
				return true;
			} else if(object == null || this.getClass() != object.getClass()) {
				return false;
			} else {
				@SuppressWarnings("rawtypes")
				Pair pair = (Pair)object;
				return this.x.equals(pair.getX()) && this.y.equals(pair.getY());
			}		
		}
	}

	public static class Triple<X,Y,Z> {
		private X x;
		private Y y;
		private Z z;
		
		public Triple(X x, Y y, Z z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}
		
		public X getX() {
			return this.x;
		}
		
		public Y getY() {
			return this.y;
		}
		
		public Z getZ() {
			return this.z;
		}
		
		@Override
		public int hashCode() {
			return this.x.hashCode() + this.y.hashCode() + this.z.hashCode();
		}
		
		@Override
		public boolean equals(Object object) {
			if(this == object) {
				return true;
			} else if(object == null || this.getClass() != object.getClass()) {
				return false;
			} else {
				@SuppressWarnings("rawtypes")
				Triple triple = (Triple)object;
				return this.x.equals(triple.getX()) && this.y.equals(triple.getY()) && this.z.equals(triple.getZ());
			}		
		}
	}

	public static class MultivalueMap<K,V> extends HashMap<K,Set<V>> {
		private static final long serialVersionUID = 1L;
	
		public void add(K k, V v) {
			Set<V> vSet = super.get(k);
			if(vSet == null) {
				super.put(k, vSet = new HashSet<V>());
			}
			vSet.add(v);
		}
		
		@Override
		public Set<V> get(Object k) {
			Set<V> vSet = super.get(k);
			return vSet == null ? new HashSet<V>() : vSet;
		}
	}
	
	public static class Heap<T> {
		private List<Pair<T,Integer>> heap = new ArrayList<Pair<T,Integer>>();
		private Map<T,Integer> positions = new HashMap<T,Integer>();
		
		public void push(T t, int priority) {
			System.out.println("Pushed element " + t);
			this.positions.put(t, this.heap.size());
			this.heap.add(new Pair<T,Integer>(t,priority));
			this.pushUp(heap.size()-1);
			
			System.out.println(this + "\n");
		}
		
		public T pop() {
			if(this.heap.size() > 0) {
				this.swap(0, this.heap.size()-1);
				T t = this.heap.remove(this.heap.size()-1).getX();
				this.positions.remove(t);
				System.out.println("Popped element " + t);
				return t;
			} else {
				return null;
			}
		}
		
		public T getFirst() {
			return this.heap.get(0).getX();
		}
		
		public T get(int i) {
			return this.heap.get(i).getX();
		}
		
		public int size() {
			return this.heap.size();
		}
		
		public boolean isEmpty() {
			return this.heap.isEmpty();
		}
		
		public void update(T t, int priority) {
			Integer i = this.positions.get(t);
			if(i == null) {
				this.push(t, priority);
			} else {
				System.out.println("Updated element " + t);
				
				// save old priority
				int prevPriority = this.heap.get(i).getY();
				
				// update priority
				this.heap.set(i, new Pair<T,Integer>(t, priority));
				
				// push up or down
				if(prevPriority > priority) {
					this.pushUp(i);
				} else {
					this.pushDown(i);
				}
			}
		}
		
		private int parent(int i) {
			return (i-1)/2;
		}
		
		private int left(int i) {
			return 2*i+1;
		}
		
		private int right(int i) {
			return 2*i+2;
		}
		
		private void swap(int i, int j) {
			Pair<T,Integer> pair = this.heap.get(i);
			this.heap.set(i, this.heap.get(j));
			this.heap.set(j, pair);
			this.positions.put(this.heap.get(i).getX(), i);
			this.positions.put(this.heap.get(j).getX(), j);
		}
		
		private void pushDown(int i) {
	        int left = this.left(i);
	        int right = this.right(i);
	        int largest = i;
	        
	        if(left < this.heap.size() && this.heap.get(largest).getY() > this.heap.get(left).getY()) {
	        	largest = left;
	        }
	        if(right < this.heap.size() && this.heap.get(largest).getY() > this.heap.get(right).getY()) {
	        	largest = right;
	        }
	        
	        if(largest != i) {
	        	this.swap(largest, i);
	        	this.pushDown(largest);
	        }
		}
		
	    private void pushUp(int i) {
	        while(i > 0 && this.heap.get(this.parent(i)).getY() > this.heap.get(i).getY()) {
	            this.swap(this.parent(i), i);
	            i = this.parent(i);
	        }
	    }
	    
	    @Override
	    public String toString() {

	        StringBuffer s = new StringBuffer("Heap:\n");
	        int rowStart = 0;
	        int rowSize = 1;
	        for (int i = 0; i < heap.size(); i++) {
	            if (i == rowStart+rowSize) {
	                s.append('\n');
	                rowStart = i;
	                rowSize *= 2;
	            }
	            s.append(get(i));
	            s.append(" ");
	        }
	        return s.toString();
	    }
	    
	    public String toString2() {
	        StringBuilder s = new StringBuilder();
	        for(Pair<T,Integer> pair : this.heap){
	            s.append(pair.getX().toString() + ": " + pair.getY() + "\n");
	        }
	        return s.toString();
	    }
	}
}
