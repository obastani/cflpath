package org.cflpath.graph;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.cflpath.cfl.Element.Terminal;
import org.cflpath.cfl.Element.Variable;
import org.cflpath.cfl.NormalCFL;
import org.cflpath.cfl.Production.GeneralProduction;

public class FlowsToContextGraph extends CFLGraph {
	private static final long serialVersionUID = 1L;

	private Set<String> references = new HashSet<String>();
	private Set<String> methods = new HashSet<String>();


	// terminals for flows-to cfl
	
	private Terminal new_terminal = new Terminal("new", 0.0);
	
	private Terminal assign = new Terminal("assign", 0.0);
	
	private Terminal store_star = new Terminal("store_*", 1.0);
	private Terminal store_(String reference) { return new Terminal("store_" + reference, 0.0); }
	
	private Terminal load_star = new Terminal("load_*", 1.0);
	private Terminal load_(String reference) { return new Terminal("load_" + reference, 0.0); }	
	
	// variables for flows-to cfl
	
	private Variable flowsTo = new Variable("flowsTo");
	private Variable flowsToBar = new Variable("flowsToBar");
	private Variable flowsToRight = new Variable("flowsToRight");
	private Variable alias = new Variable("alias");
	
	// terminals for context cfl

	private Terminal enter_(String method) { return new Terminal("enter_" + method, 0.0); }
	private Terminal exit_(String method) { return new Terminal("exit_" + method, 0.0); }
	
	// variables for context cfl

	private Variable T = new Variable("T");
	
	// functions for adding references and methods

	public void addReference(String reference) {
		this.references.add(reference);
	}
	
	public void addMethod(String method) {
		this.methods.add(method);
	}
	
	
	// functions for getting flows-to terminals
	
	public Terminal getAssign() {
		return this.assign;
	}
	
	public Terminal getNew() {
		return this.new_terminal;
	}
	
	public Terminal getLoadStar() {
		return this.load_star;
	}
	
	public Terminal getLoad(String field) {
		return this.load_(field);
	}
	
	public Terminal getStoreStar() {
		return this.store_star;
	}
	
	public Terminal getStore(String field) {
		return this.store_(field);
	}
	
	// add a stub method to the graph
	// TODO: modify to include context sensitivity
	
	public void addStubMethod(List<Vertex> args, Vertex ret, String methodSignature) {
		// temporary variable in the method
		Vertex temp_method = new Vertex("temp_" + methodSignature);
		super.addEdge(temp_method, temp_method, this.load_star);
		super.addEdge(temp_method, temp_method, this.store_star);
		
		// new object in the method
		Vertex obj_method = new Vertex("obj_" + methodSignature);
		super.addEdge(obj_method, temp_method, this.new_terminal);
		
		// add edges to and from args
		for(Vertex arg : args) {
			super.addEdge(arg, temp_method, this.assign);
			super.addEdge(temp_method, arg, this.assign);
		}
		super.addEdge(temp_method, ret, this.assign);
	}
	
	public NormalCFL getFlowsToCfl() {
		NormalCFL cfl = new NormalCFL();
		NormalCFL normalCfl = new NormalCFL();

		// add production flowsToRight -> store_* alias load_*
		normalCfl.add(new GeneralProduction(this.flowsToRight, this.store_star, this.alias, this.load_star));
		
		// add production flowsToRight -> assign
		normalCfl.add(new GeneralProduction(this.flowsToRight, this.assign));
		
		// add production flowsToRight -> flowsToRight flowsToRight
		normalCfl.add(new GeneralProduction(this.flowsToRight, this.flowsToRight, this.flowsToRight));

		// add production flowsTo -> new
		normalCfl.add(new GeneralProduction(this.flowsTo, this.new_terminal));
		
		// add production flowsTo ->  new flowsToRight
		normalCfl.add(new GeneralProduction(this.flowsTo, this.new_terminal, this.flowsToRight));

		// add production alias -> flowsToBar flowsTo
		normalCfl.add(new GeneralProduction(this.alias, this.flowsToBar, this.flowsTo));
		
		for(String reference : this.references) {
			// add production flowsToRight -> store_f alias load_f
			normalCfl.add(new GeneralProduction(this.flowsToRight, this.store_(reference), this.alias, this.load_(reference)));
			
			// add production flowsToRight -> store_* alias load_f
			normalCfl.add(new GeneralProduction(this.flowsToRight, this.store_star, this.alias, this.load_(reference)));

			// add production flowsToRight -> store_f alias load_*
			normalCfl.add(new GeneralProduction(this.flowsToRight, this.store_(reference), this.alias, this.load_star));
		}
		
		return cfl;
	}
	
	public NormalCFL getContextCFL() {
		NormalCFL cfl = new NormalCFL();
		for(String method : this.methods) {
			cfl.add(new GeneralProduction(this.T, this.enter_(method), this.exit_(method)));
			cfl.add(new GeneralProduction(this.T, this.enter_(method), this.T, this.exit_(method)));
			cfl.add(new GeneralProduction(this.T, this.T, this.T));
		}
		return cfl;
	}
}
