package org.cflpath.cfl;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.cflpath.cfl.NormalCFL.BinaryProduction;
import org.cflpath.cfl.NormalCFL.UnaryProduction;
import org.cflpath.utility.Factory;
import org.cflpath.utility.Utility.Heap;
import org.cflpath.utility.Utility.MultivalueMap;
import org.cflpath.utility.Utility.Pair;

public class CFLGraph {
	// Elements
	protected Factory<String> elementFactory = new Factory<String>();
	
	// Vertices
	private Factory<String> vertexFactory = new Factory<String>();
	private Set<Integer> vertices = new HashSet<Integer>();
	private Map<Integer,Integer> weights = new HashMap<Integer,Integer>();

	// Pair<Vertex,Vertex>,Terminal
	private MultivalueMap<Pair<Integer,Integer>,Integer> edges = new MultivalueMap<Pair<Integer,Integer>,Integer>();
	// Vertex,Pair<Vertex,Terminal>
	private MultivalueMap<Integer,Pair<Integer,Integer>> incomingEdges = new MultivalueMap<Integer,Pair<Integer,Integer>>();
	private MultivalueMap<Integer,Pair<Integer,Integer>> outgoingEdges = new MultivalueMap<Integer,Pair<Integer,Integer>>();

	// get element by id
	public String getElementById(int id) {
		return this.elementFactory.getElementById(id);
	}
	
	private int add(String vertex) {
		int vertexId = this.vertexFactory.getIdByElement(vertex);
		this.vertices.add(vertexId);
		this.weights.put(vertexId, 0);
		return vertexId;
	}
	
	public String getVertexById(int id) {
		return this.vertexFactory.getElementById(id);
	}
	
	public void setWeight(int element, int weight) {
		this.weights.put(element, weight);
	}
	
	public void addEdge(String source, String sink, int terminal) {
		int sourceId = this.add(source);
		int sinkId = this.add(sink);

		this.edges.add(new Pair<Integer,Integer>(sourceId,sinkId), terminal);
		this.incomingEdges.add(sinkId, new Pair<Integer,Integer>(sourceId,terminal));
		this.outgoingEdges.add(sourceId, new Pair<Integer,Integer>(sinkId,terminal));
	}

	public class Path {
		// Pair<Vertex,Terminal>
		private LinkedList<Pair<Integer,Integer>> pairs = new LinkedList<Pair<Integer,Integer>>();
		private int start;
		private int weight;
		
		@SafeVarargs
		public Path(int start, Pair<Integer,Integer > ... pairs) {
			this.weight = 0;
			this.start = start;
			for(Pair<Integer,Integer> pair : pairs) {
				this.add(pair);
			}
		}
		
		public Path(Path ... paths) {
			this.weight = 0;
			this.start = paths.length > 0 ? paths[0].getStart() : null;
			for(Path path : paths) {
				this.add(path);
			}
		}
		
		public void add(Pair<Integer,Integer> pair) {
			this.pairs.add(pair);
			this.weight += weights.get(pair.getY());
		}
		
		public void add(Path path) {
			this.pairs.addAll(path.getPairs());
			this.weight += path.getWeight();
		}
		
		public List<Pair<Integer,Integer>> getPairs() {
			return this.pairs;
		}
		
		public int getStart() {
			return this.start;
		}
		
		public int getWeight() {
			return this.weight;
		}
		
		public Path reverse() {
			
			Path reversePath = null;
			Integer prevTerminal = null;
			
			boolean last = true;
			for(Iterator<Pair<Integer,Integer>> iter = this.pairs.descendingIterator(); iter.hasNext();) {
				Pair<Integer,Integer> pair = iter.next();
				
				if(last) {
					reversePath = new Path(pair.getX());
					last = false;
				} else {
					reversePath.add(new Pair<Integer,Integer>(pair.getX(), prevTerminal));
				}
				prevTerminal = pair.getY();
			}
			
			reversePath.add(new Pair<Integer,Integer>(this.start, prevTerminal));
			
			return reversePath;
		}
	}
	
	public class GraphElement {
		private int source;
		private int sink;
		private int element;
		
		public GraphElement(int source, int sink, int element) {
			this.source = source;
			this.sink = sink;
			this.element = element;
		}
		
		public int getSource() {
			return this.source;
		}
		
		public int getSink() {
			return this.sink;
		}
		
		public int getElement() {
			return this.element;
		}
		
		@Override
		public String toString() {
			return elementFactory.getElementById(this.element) + "(" + vertexFactory.get(this.source + "," + vertexFactory.get(this.sink) + ")"; 
		}
	}
	
	// run Knuth's algorithms
	public Map<GraphElement,Path> getShortestPaths(NormalCFL cfl, int flowsTo, int flowsToBar) {

		// maps from the minimum graph elements to their paths
		Map<GraphElement,Path> minGraphElementPaths = new HashMap<GraphElement,Path>();
		// Pair<Vertex,Element>,Pair<Vertex,Path>
		MultivalueMap<Pair<Integer,Integer>,Pair<Integer,Path>> minGraphElementPathsBySource = new MultivalueMap<Pair<Integer,Integer>,Pair<Integer,Path>>();
		MultivalueMap<Pair<Integer,Integer>,Pair<Integer,Path>> minGraphElementPathsBySink = new MultivalueMap<Pair<Integer,Integer>,Pair<Integer,Path>>();

		Map<GraphElement,Path> curMinGraphElementPaths = new HashMap<GraphElement,Path>(); // stores the current minimum element paths
		Heap<GraphElement> curMinGraphElementQueue = new Heap<GraphElement>(); // stores the current minimum graph elements left to be processed		

		// step 1: fill in minGraphElementPaths and minGraphElementQueue with the initial terminals
		for(int source : this.vertices) {
			for(Pair<Integer,Integer> pair : this.outgoingEdges.get(source)) {
				GraphElement element = new GraphElement(source, pair.getX(), pair.getY());
				curMinGraphElementPaths.put(element, new Path(source, pair));
				curMinGraphElementQueue.push(element, this.weights.get(pair.getY()));
			}
		}

		// step 2: for each element in minGraphElementQueue, iterate through productions and check if they are smaller
		int i=0;
		while(!curMinGraphElementQueue.isEmpty()) {

		    // step 2a: get the minimum element
		    GraphElement minElement = curMinGraphElementQueue.pop();
		    
		    // TODO: remove printing
		    if(i%10000 == 0) {
		    	System.out.println("Current iteration: " + i);
		    	System.out.println("Current heap size: " + curMinGraphElementQueue.size());
		    }
		    i++;

		    // step 2b: add the minimum element to the map
		    Path minPath = curMinGraphElementPaths.get(minElement);
		    minGraphElementPaths.put(minElement, minPath);
		    minGraphElementPathsBySource.add(new Pair<Integer,Integer>(minElement.getSource(),minElement.getElement()), new Pair<Integer,Path>(minElement.getSink(),minPath));
		    minGraphElementPathsBySink.add(new Pair<Integer,Integer>(minElement.getSink(),minElement.getElement()), new Pair<Integer,Path>(minElement.getSource(),minPath));
		    
		    // TODO: fix temporary hack
		    if(minElement.getElement() == flowsTo) {
		    	GraphElement barElement = new GraphElement(minElement.getSink(), minElement.getSource(), flowsToBar);
		    	Path barPath = minPath.reverse();
			    minGraphElementPaths.put(barElement, barPath);
			    minGraphElementPathsBySource.add(new Pair<Integer,Integer>(barElement.getSource(),barElement.getElement()), new Pair<Integer,Path>(barElement.getSink(),barPath));
			    minGraphElementPathsBySink.add(new Pair<Integer,Integer>(barElement.getSink(),barElement.getElement()), new Pair<Integer,Path>(barElement.getSource(),barPath));		    	
		    }
		    
		    // step 2c: update the minimum path for all single productions using that element
		    for(UnaryProduction unaryProduction : cfl.getUnaryProductionsByInput(minElement.getElement())) {
		    	GraphElement curElement = new GraphElement(minElement.getSource(), minElement.getSink(), unaryProduction.getOutput());
		    	
		        Path curPath = curMinGraphElementPaths.get(curElement);
		        Path newPath = minGraphElementPaths.get(minElement);

		        if(curPath == null || newPath.getWeight() < curPath.getWeight()) {
		            curMinGraphElementQueue.update(curElement, newPath.getWeight());
		            curMinGraphElementPaths.put(curElement, newPath);
		        }
		    }

		    // step 2d: update the minimum path for all pair productions using that element as the first input
		    for(BinaryProduction binaryProduction : cfl.getBinaryProductionsByFirstInput(minElement.getElement())) {
		    	for(Pair<Integer,Path> pair : minGraphElementPathsBySource.get(new Pair<Integer,Integer>(minElement.getSink(), binaryProduction.getSecondInput()))) {
		    		Path secondPath = minGraphElementPaths.get(new GraphElement(minElement.getSink(), pair.getX(), binaryProduction.getSecondInput()));
		    		if(secondPath != null) {
		    			GraphElement curElement = new GraphElement(minElement.getSource(), pair.getX(), binaryProduction.getOutput());
			    		
		    			Path curPath = curMinGraphElementPaths.get(curElement);
		    			Path newPath = new Path(minGraphElementPaths.get(minElement), secondPath);
		    			
		    			if(curPath == null || newPath.getWeight() < curPath.getWeight()) {
		    				curMinGraphElementQueue.update(curElement, newPath.getWeight());
		    				curMinGraphElementPaths.put(curElement, newPath);
		    			}
		    		}
		    	}
		    }

		    // step 2e: update the minimum path for all pair productions using that element as the second input
		    for(BinaryProduction binaryProduction : cfl.getBinaryProductionsBySecondInput(minElement.getElement())) {
		    	for(Pair<Integer,Path> pair : minGraphElementPathsBySink.get(new Pair<Integer,Integer>(minElement.getSource(), binaryProduction.getFirstInput()))) {
		    		Path firstPath = minGraphElementPaths.get(new GraphElement(pair.getX(), minElement.getSource(), binaryProduction.getFirstInput()));
		    		if(firstPath != null) {
		    			GraphElement curElement = new GraphElement(pair.getX(), minElement.getSink(), binaryProduction.getOutput());
			    		
		    			Path curPath = curMinGraphElementPaths.get(curElement);
		    			Path newPath = new Path(firstPath, minGraphElementPaths.get(minElement));
		    			
		    			if(curPath == null || newPath.getWeight() < curPath.getWeight()) {
		    				curMinGraphElementQueue.update(curElement, newPath.getWeight());
		    				curMinGraphElementPaths.put(curElement, newPath);
		    			}
		    		}
		    	}
		    }

		}
		
		return curMinGraphElementPaths;
	}
	
	@Override
	public String toString() {
		StringBuilder result = new StringBuilder();
		for(Map.Entry<Pair<Integer,Integer>,Set<Integer>> entry : this.edges.entrySet()) {
			for(Integer terminal : entry.getValue()) {
				result.append("(" + entry.getKey().getX().toString() + ","
						+ entry.getKey().getY().toString() + ","
						+ terminal.toString() + ")" + "\n");
			}
		}
		return result.toString();
	}
}
